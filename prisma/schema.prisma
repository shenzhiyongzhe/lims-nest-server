generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @db.VarChar(10)
  password     String   @db.VarChar(32)
  phone        String   @db.VarChar(11)
  address      String   @db.VarChar(100)
  lv           String   @default("青铜用户") @db.VarChar(16)
  overtime     Int      @default(0)
  overdue_time Int      @default(0)
  is_high_risk Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  loanAccounts LoanAccount[]
  orders       Order[]
  repaymentRecords RepaymentRecord[]
  chatSessionsAsUser ChatSession[] // 作为用户参与的聊天会话
  @@map("users")
}

// 复用的枚举（还款状态）
enum ManagementRoles {
  管理员
  财务员
  风控人
  负责人
  收款人
  打款人
}
model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @db.VarChar(10)
  password     String   @db.VarChar(32)
  phone        String   @db.VarChar(11)
  role         ManagementRoles
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  // 添加关系
  payees       Payee[]
  loanAccountRoles LoanAccountRole[]
  chatSessionsAsAdmin ChatSession[] // 作为管理员参与的聊天会话

  @@map("admins")
}

// 复用的枚举（还款状态）
enum LoanAccountStatus {
  pending
  active
  overdue
  settled
  unsettled
  negotiated
  to_be_processed
  blacklist
}

enum RepaymentScheduleStatus {
  pending
  active
  overdue
  paid
}
model LoanAccount {
  id                String    @id @default(cuid())
  user_id           Int
  loan_amount       Decimal   @db.Decimal(10, 2)
  receiving_amount  Decimal?  @db.Decimal(10, 2)
  to_hand_ratio     Decimal?   @db.Decimal(10, 2)
  capital           Decimal   @db.Decimal(10, 2)
  interest          Decimal   @db.Decimal(10, 2)
  due_start_date    DateTime
  due_end_date      DateTime
  status            LoanAccountStatus  @default(pending)
  handling_fee      Decimal   @db.Decimal(10, 2)
  total_periods     Int
  repaid_periods    Int       @default(0)
  daily_repayment   Decimal   @db.Decimal(10, 2)
  risk_controller   String    @db.VarChar(10)
  collector         String    @db.VarChar(10)
  payee             String    @db.VarChar(10)
  lender            String    @db.VarChar(10)
  company_cost      Int       @default(0)
  created_at        DateTime  @default(now())
  created_by        Int
  updated_at        DateTime? @updatedAt

  // 关系
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  repaymentSchedules RepaymentSchedule[]
  repaymentRecords RepaymentRecord[]
  loanAccountRoles LoanAccountRole[]
  chatSessionsAsLoan ChatSession[] // 与此贷款相关的聊天会话
  @@map("loan_accounts")
}

model LoanAccountRole {
  id            Int      @id @default(autoincrement())
  loan_account_id String
  admin_id      Int
  role_type     String   @db.VarChar(20) // 'collector', 'risk_controller', 'payee', 'lender'
  created_at    DateTime @default(now())

  loan_account  LoanAccount @relation(fields: [loan_account_id], references: [id], onDelete: Cascade)
  admin         Admin @relation(fields: [admin_id], references: [id])

  @@unique([loan_account_id, admin_id, role_type])
  @@map("loan_account_roles")
}

model RepaymentSchedule {
  id             Int              @id @default(autoincrement())
  loan_id        String
  period         Int
  due_start_date DateTime
  due_end_date   DateTime
  due_amount     Decimal          @db.Decimal(10, 2)
  capital        Decimal?         @db.Decimal(10, 2)
  interest       Decimal?         @db.Decimal(10, 2)
  status         RepaymentScheduleStatus  @default(pending)
  paid_amount    Decimal?         @db.Decimal(10, 2)
  paid_at        DateTime?

  // 外键关系到 LoanAccount
  loan_account LoanAccount @relation(fields: [loan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  overdueRecords OverdueRecord[]

  @@map("repayment_schedules")
}

enum PaymentMethod{
  wechat_pay
  ali_pay
}
model RepaymentRecord {
  id              Int @id @default(autoincrement())
  loan_id         String 
  user_id         Int
  paid_amount     Decimal? @db.Decimal(10, 2)
  paid_at         DateTime @default(now())
  payment_method  PaymentMethod @default(wechat_pay) 
  payee_id        Int
  remark          String? @db.VarChar(255)
  order_id        String

  order         Order? @relation(fields: [order_id], references: [id])
  loan_account  LoanAccount? @relation(fields: [loan_id], references: [id])
  user          User? @relation(fields: [user_id], references: [id])
  payee         Payee? @relation(fields: [payee_id], references: [id])
  @@map("repayment_records")
}

// 每日逾期记录表（去重按 schedule_id）
model OverdueRecord {
  id           Int      @id @default(autoincrement())
  user_id      Int
  loan_id      String
  schedule_id  Int      @unique
  collector    String   @db.VarChar(10)
  overdue_date DateTime
  created_at   DateTime @default(now())

  schedule     RepaymentSchedule @relation(fields: [schedule_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("overdue_records")
  @@index([collector, overdue_date])
  @@index([overdue_date])
  @@index([user_id, overdue_date])
}


model Payee {
  id          Int      @id @default(autoincrement())
  admin_id          Int
  username          String   @db.VarChar(10)
  address           String   @db.VarChar(100)
  payment_limit     Int      @default(20000)
  qrcode_number     Int      @default(5)
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt

  admin        Admin?   @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  qrcode       QrCode[]
  orders       Order[]
  repaymentRecords RepaymentRecord[]
  @@map("payees")
}


model QrCode {
  id           Int      @id @default(autoincrement())
  payee_id            Int
  qrcode_url          String   @db.VarChar(255)
  qrcode_type         PaymentMethod @default(wechat_pay)
  active              Boolean      @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime? @updatedAt
  payee        Payee? @relation(fields: [payee_id], references: [id])
  @@map("qr_codes")
}

enum OrderStatus {
  pending
  grabbed
  completed
  expired
  cancelled
}
// 在现有schema基础上添加订单表
model Order {
  id              String @id @default(cuid())
  customer_id     Int
  loan_id         String
  amount          Decimal  @db.Decimal(10, 2)
  payment_periods  Int
  payment_method  PaymentMethod
  remark          String?  @db.VarChar(255)
  status          OrderStatus @default(pending)
  payee_id        Int?
  created_at      DateTime @default(now())
  updated_at      DateTime? @updatedAt
  expires_at      DateTime

  customer        User     @relation(fields: [customer_id], references: [id])
  payee           Payee?   @relation(fields: [payee_id], references: [id])
  repaymentRecords RepaymentRecord[]


  @@map("orders")
  @@index([status, created_at])
  @@index([payee_id, created_at])
  @@index([customer_id, created_at])

}



// 反馈类型
enum FeedbackType {
  bug
  suggestion
}

// 反馈状态
enum FeedbackStatus {
  open
  fixed
}

// 用户反馈/建议表
model Feedback {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(100)
  content     String          @db.Text
  type        FeedbackType
  status      FeedbackStatus  @default(open)
  reporter    String?         @db.VarChar(32) // 提交人（可选）
  contact     String?         @db.VarChar(64) // 联系方式（可选）
  created_at  DateTime        @default(now())
  updated_at  DateTime?       @updatedAt

  @@map("feedbacks")
  @@index([status, created_at])
}

// 聊天消息类型
enum MessageType {
  text
  image
}

// 聊天会话表
model ChatSession {
  id          String   @id @default(cuid())
  loan_id     String   // 关联的贷款ID
  admin_id    Int      // 管理员ID
  user_id     Int      // 用户ID
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  last_message_at DateTime @default(now())

  // 关系
  loan_account LoanAccount @relation(fields: [loan_id], references: [id], onDelete: Cascade)
  admin        Admin       @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  messages     ChatMessage[]

  @@unique([loan_id, admin_id, user_id])
  @@map("chat_sessions")
  @@index([admin_id, updated_at])
  @@index([user_id, updated_at])
}

// 聊天消息表
model ChatMessage {
  id            String      @id @default(cuid())
  session_id    String      // 聊天会话ID
  sender_id     Int         // 发送者ID（可能是admin或user）
  sender_type   String      @db.VarChar(10) // 'admin' 或 'user'
  message_type  MessageType @default(text)
  content       String      @db.Text // 文字内容或图片URL
  is_read       Boolean     @default(false)
  created_at    DateTime    @default(now())

  // 关系
  session ChatSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@index([session_id, created_at])
  @@index([sender_id, created_at])
}